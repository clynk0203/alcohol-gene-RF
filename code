n <- Sys.getenv("SGE_TASK_ID")
library(Boruta)
library(tidyverse)
library(randomForest)
library(caret)
library(pROC)
data_all<-read.csv('/path~')
set.seed(1234)

bor<-Boruta(outcome~.,data=data_all,doTrace=2)

important<-getSelectedAttributes(bor, withTentative = F)
data<-read.csv('/restricted/projectnb/mtdna-alcohol/Chenglin/lab_journal/code_data/data/toydata_cat.csv')
rownames(data)<-data[,1]
data<-data[,-1]
data_all<-data[,colnames(data) %in% c("outcome", "covariate",important)]

#sample size a is the number of participants  
set.seed(1234)

#70% sample for training data, 30% for testing data
dataRF_train_all <- sample(a, a*0.7)

dataRF_all_train <- data[dataRF_train_all, ]
dataRF_all_test <- data[-dataRF_train_all, ]

set.seed(1234)
dataRFwalltrain.forest <- randomForest(as.factor(groups) ~ ., data = dataRF_all_train, importance = TRUE,  na.action=na.omit)

test.predictions <- predict(dataRFwalltrain.forest, dataRF_all_test, type = "prob")   
roc <- roc(dataRF_all_test$groups, test.predictions[,2])
auc_d<-as.numeric(auc(roc))

#create a function for iteration to identify best threshold
thre_pre<-function(x){
  
  set.seed(1234)
  dataRFwalltrain.forest <- randomForest(as.factor(groups) ~ ., data = dataRF_all_train, importance = TRUE,  na.action=na.omit,cutoff = c(1-x, x))
  test.predictions <- predict(dataRFwalltrain.forest, dataRF_all_test, type = "prob")   
  roc <- roc(dataRF_all_test$groups, test.predictions[,2])
  thres<-coords(roc, "best", ret = "threshold")
  
  return(as.numeric(thres))
}


thre_list <- function(x){
  if (length(x)==10) 
  {return(x)} 
  else {x <- c(x, thre_pre(x[length(x)]))
  ; thre_list(x)
  }
}


threshold_list<-as.data.frame(thre_list(auc_d))

#######auc list
a<-threshold_list[n,]

set.seed(1234)
dataRFwalltrain.forest <- randomForest(as.factor(groups) ~ ., data = dataRF_all_train, importance = TRUE,  na.action=na.omit,cutoff = c(1-a, a))
OOB<-dataRFwalltrain.forest$err.rate[1000]
test.predictions <- predict(dataRFwalltrain.forest, dataRF_all_test, type = "prob")   
roc <- roc(dataRF_all_test$groups, test.predictions[,2])
auc<-as.numeric(auc(roc))
data_pre<-predict(dataRFwalltrain.forest,dataRF_all_test )
conMa<-confusionMatrix(data_pre, as.factor(dataRF_all_test$groups))

output<-c(a, OOB, auc, conMa$byClass[1],conMa$byClass[2] )

write(output, file = paste(result,"toyiteration",n,".csv",sep=""),ncol=length(output),append=T)
